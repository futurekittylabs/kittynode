name: Release app

on:
  workflow_dispatch:
  push:
    tags:
      - kittynode-app-*

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: --target aarch64-apple-darwin
          - platform: ubuntu-22.04
            args: --bundles deb rpm
          - platform: windows-latest
            args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Verify version match
        shell: bash
        run: |
          TAG_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^kittynode-app-\([0-9.]*\).*/\1/')
          CARGO_VERSION=$(grep '^version = ' packages/app/src-tauri/Cargo.toml | cut -d'"' -f2)

          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Version mismatch: Tag version '$TAG_VERSION' does not match Cargo.toml version '$CARGO_VERSION'"
            exit 1
          fi

          echo "Version check passed: $TAG_VERSION"

      - name: Install system dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true

      - name: Write App Store Connect API key (macOS)
        if: matrix.platform == 'macos-latest'
        shell: bash
        env:
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_P8_BASE64: ${{ secrets.APPLE_API_KEY_P8_BASE64 }}
        run: |
          mkdir -p "$RUNNER_TEMP/private_keys"
          install -m 600 /dev/null "$RUNNER_TEMP/private_keys/AuthKey_${APPLE_API_KEY}.p8"
          printf '%s' "$APPLE_API_KEY_P8_BASE64" | base64 -D > "$RUNNER_TEMP/private_keys/AuthKey_${APPLE_API_KEY}.p8"

      - name: Build the app (macOS + notarize)
        if: matrix.platform == 'macos-latest'
        uses: tauri-apps/tauri-action@v0.5.23
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: ${{ format('{0}/private_keys/AuthKey_{1}.p8', runner.temp, secrets.APPLE_API_KEY) }}
        with:
          releaseId: ${{ steps.create_release.outputs.id }}
          tagName: ${{ github.ref_name }}
          projectPath: packages/app/src-tauri
          args: ${{ matrix.args }}
          includeUpdaterJson: true

      - name: Cleanup ASC key (macOS)
        if: always() && matrix.platform == 'macos-latest'
        shell: bash
        run: |
          rm -f "$RUNNER_TEMP/private_keys/"AuthKey_*.p8

      - name: Build the app (non-macOS)
        if: matrix.platform != 'macos-latest'
        uses: tauri-apps/tauri-action@v0.5.23
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ steps.create_release.outputs.id }}
          tagName: ${{ github.ref_name }}
          projectPath: packages/app/src-tauri
          args: ${{ matrix.args }}
          includeUpdaterJson: true

  publish-release:
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
