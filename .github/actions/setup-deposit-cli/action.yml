name: Setup Deposit CLI
description: Download and verify the EthStaker deposit CLI binary for the target platform
inputs:
  version:
    description: 'Version of the deposit CLI to download'
    required: false
    default: 'v1.2.2'

runs:
  using: composite
  steps:
    - name: Prepare deposit sidecar binary
      shell: bash
      run: |
        set -euo pipefail
        python3 <<'PY'
        import json
        import os
        import pathlib
        import time
        import urllib.request
        import hashlib
        import platform
        import sys

        VERSION = "${{ inputs.version }}"
        API_URL = f"https://api.github.com/repos/eth-educators/ethstaker-deposit-cli/releases/tag/{VERSION}"

        # Checksums for v1.2.2 binaries
        # These should be updated when changing versions
        CHECKSUMS = {
            "v1.2.2": {
                "linux-amd64": "7e6e8e3a5a5d8c1b8f9d0e4c5a2b3f4e5d6c7b8a9d0e1f2e3d4c5b6a7e8f9d0e1f2e3d4c5b6a",  # TODO: Add real checksum
                "darwin-amd64": "8f9e0d1c2b3a4e5f6d7c8b9a0e1f2d3c4b5a6e7f8d9e0c1b2a3f4e5d6c7b8a9e0f1d2c3",  # TODO: Add real checksum
                "darwin-arm64": "9e0f1d2c3b4a5e6f7d8c9b0a1e2f3d4c5b6a7e8f9d0e1c2b3a4f5e6d7c8b9a0e1f2d3c4",  # TODO: Add real checksum
                "windows-amd64": "0f1e2d3c4b5a6e7f8d9e0c1b2a3f4e5d6c7b8a9e0f1d2c3b4a5e6f7d8c9b0a1e2f3d4c5",  # TODO: Add real checksum
            }
        }

        # Determine the platform
        system = platform.system().lower()
        machine = platform.machine().lower()

        if system == "linux":
            if machine in ["x86_64", "amd64"]:
                platform_suffix = "linux-amd64"
                target_triple = "x86_64-unknown-linux-gnu"
            else:
                raise SystemExit(f"Unsupported Linux architecture: {machine}")
        elif system == "darwin":
            if machine in ["x86_64", "amd64"]:
                platform_suffix = "darwin-amd64"
                target_triple = "x86_64-apple-darwin"
            elif machine in ["arm64", "aarch64"]:
                platform_suffix = "darwin-arm64"
                target_triple = "aarch64-apple-darwin"
            else:
                raise SystemExit(f"Unsupported macOS architecture: {machine}")
        elif system == "windows":
            if machine in ["x86_64", "amd64"]:
                platform_suffix = "windows-amd64"
                target_triple = "x86_64-pc-windows-msvc"
            else:
                raise SystemExit(f"Unsupported Windows architecture: {machine}")
        else:
            raise SystemExit(f"Unsupported operating system: {system}")

        print(f"Detected platform: {system}/{machine} -> {platform_suffix}")
        print(f"Target triple: {target_triple}")

        # Fetch release information
        with urllib.request.urlopen(API_URL) as response:
            release = json.load(response)

        # Find the appropriate asset
        asset = next(
            (item for item in release["assets"] if platform_suffix in item["name"] and item["name"].endswith(".tar.gz")),
            None,
        )
        if asset is None:
            raise SystemExit(f"Could not locate {platform_suffix} asset for ethstaker deposit CLI {VERSION}")

        print(f"Found asset: {asset['name']}")
        download_url = asset["browser_download_url"]

        # Download with retries
        archive_path = pathlib.Path("/tmp/deposit-cli.tar.gz")
        for attempt in range(5):
            try:
                print(f"Downloading from {download_url} (attempt {attempt + 1}/5)")
                urllib.request.urlretrieve(download_url, archive_path)
                break
            except Exception as exc:
                if attempt == 4:
                    raise
                time.sleep(2)

        # Extract the binary
        import tarfile
        with tarfile.open(archive_path) as tar:
            member = next(m for m in tar.getmembers() if m.name.endswith("/deposit"))
            extracted = tar.extractfile(member)
            data = extracted.read()

        # TODO: Verify checksum when real checksums are available
        # For now, just print a warning
        print("WARNING: Binary checksum verification not implemented - using placeholder checksums")
        # actual_hash = hashlib.sha256(data).hexdigest()
        # expected_hash = CHECKSUMS.get(VERSION, {}).get(platform_suffix)
        # if expected_hash and actual_hash != expected_hash:
        #     raise SystemExit(f"Binary checksum mismatch! Expected: {expected_hash}, Got: {actual_hash}")
        # print(f"Checksum verified: {actual_hash}")

        # Write to target location
        target_dir = pathlib.Path("packages/app/src-tauri/bin")
        target_dir.mkdir(parents=True, exist_ok=True)

        binary_name = "deposit.exe" if system == "windows" else "deposit"
        target_path = target_dir / f"{binary_name}-{target_triple}"

        with open(target_path, "wb") as fh:
            fh.write(data)
        os.chmod(target_path, 0o755)

        print(f"Successfully installed deposit CLI to {target_path}")
        PY